@using System.Threading
@using System.Text.Json
@using System.Net.WebSockets
@using System.Text
@using d2s3.State
@using d2s3.Models
@using Markdig
@inject ChatStateContainer ChatState
@inject ILocalStorageService LocalStorageService
@inject SidebarStateContainer SidebarStateContainer
@inject HttpClient HttpClient
@implements IDisposable
@page "/chat/{ChatId:nonfile?}"

<PageTitle>@title</PageTitle>

<div class="flex flex-col items-center justify-center h-screen">
  <div class="h-3/4 w-3/5 flex flex-col overflow-y-auto overflow-x-hidden gap-2 pt-4 pb-20" id="chat-list">
    @if (isLoadingInitialMessages)
    {
      <div class="h-screen flex flex-col items-center justify-center gap-2">
        Loading Chat...
      </div>
    }
    else
    {
      @foreach (var message in ChatState.CurrentChatMessages)
      {
        <span class="@GenerateMessageClasses(message.Role, message.MessageType)">
          @if (message.MessageType == MessageType.Failure)
          {
            <i class="bi bi-exclamation-circle-fill"></i>
          }
          @if (message.MessageType == MessageType.Success && message.Role == UserRole.Ai)
          {
            <img src="/siri.avif" alt="Siri Logo" draggable="false" height="20" width="20" class="rounded-full mt-1" />
          }
          <div class="w-max-fill overflow-x-auto">
            @((MarkupString)Markdown.ToHtml(message.MessageText))
          </div>
        </span>
      }
      @if (ChatState.IsLoadingAiResponse)
      {
        <div class="flex gap-2 animate-pulse items-center">
          <div class="h-4 w-4 rounded-full bg-white">
          </div>
          <p>Thinking</p>
        </div>
      }
    }
  </div>
  <div class="flex justify-center w-full h-1/4">
    <ChatInput ChatId="@ChatId" />
  </div>
</div>

@code {
  [Parameter]
  public string? ChatId { get; set; }
  [Parameter]
  [SupplyParameterFromQuery(Name = "prompt")]
  public required string Prompt { get; set; }
  [Parameter]
  [SupplyParameterFromQuery(Name = "isNew")]
  public bool IsNew { get; set; } = false;

  private string title = "New Chat";
  private bool isLoadingInitialMessages = false;

  CancellationTokenSource DisposalTokenSource = new CancellationTokenSource();

  private string GenerateMessageClasses(UserRole role, MessageType messageType)
  {
    var stringBuilder = new StringBuilder();

    if (role == UserRole.User)
    {
      stringBuilder.Append("ml-auto max-w-96");
    }
    else
    {
      stringBuilder.Append("mr-auto max-w-full");
    }

    if (messageType == MessageType.Failure)
    {
      stringBuilder.Append(" text-red-400");
    }
    else if (role == UserRole.User)
    {
      stringBuilder.Append(" px-6 bg-light-gray");
    }

    stringBuilder.Append(" text-start flex gap-2 items-start rounded-full p-3 w-fit");

    return stringBuilder.ToString();
  }

  protected override async Task OnInitializedAsync()
  {
    if (ChatId == null) return;

    if (IsNew)
    {
      SidebarStateContainer.ChatThreads = new List<ChatThread>(SidebarStateContainer.ChatThreads)
{ new ChatThread { ChatId = ChatId } };
      StateHasChanged();
    }

    await ChatState.ConnectWS(ChatId, IsNew, DisposalTokenSource);
    _ = ReceiveLoop();
  }

  async Task ReceiveLoop()
  {
    var buffer = new ArraySegment<byte>(new byte[1024 * 4]);

    while (!DisposalTokenSource.IsCancellationRequested)
    {
      if (ChatState.WebSocket == null || ChatState.WebSocket.State != WebSocketState.Open)
      {
        break;
      }

      var received = await ChatState.WebSocket.ReceiveAsync(buffer, DisposalTokenSource.Token);

      try
      {
        if (buffer.Array != null)
        {
          var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);
          var receivedMessage = JsonSerializer.Deserialize<AiResponse>(receivedAsText);

          if (receivedMessage != null)
          {
            ChatState.CurrentChatMessages.Add(new ChatMessage
            {
              Role = UserRole.Ai,
              MessageText = receivedMessage.ResponseMessage,
              MessageType = MessageType.Success,
              TimeStamp = DateTime.UtcNow
            });
          }
        }
      }
      catch (Exception err)
      {
        Console.WriteLine($"Error receiving message: {err.Message}");
      }

      if (received.CloseStatus.HasValue)
      {
        await ChatState.WebSocket.CloseAsync(received.CloseStatus.Value, received.CloseStatusDescription,
        DisposalTokenSource.Token);
        break;
      }

      StateHasChanged();
    }
  }

  protected override void OnInitialized()
  {
    ChatState.OnMessagesChange += StateHasChanged;
    ChatState.OnAiLoadingResponseChange += StateHasChanged;
    ChatState.OnPromptChange += StateHasChanged;
  }

  public void Dispose()
  {
    ChatState.OnMessagesChange -= StateHasChanged;
    ChatState.OnAiLoadingResponseChange -= StateHasChanged;
    ChatState.OnPromptChange -= StateHasChanged;

    DisposalTokenSource.Cancel();
    _ = ChatState.DisconectWS(DisposalTokenSource);
  }

  private async Task HandleTitleChange()
  {
    var response = await HttpClient.GetAsync($"http://localhost:5203/chat/title?prompt={Prompt}");
    var responseText = await response.Content.ReadAsStringAsync();

    if (responseText == null) return;

    var aiResponse = JsonSerializer.Deserialize<AiResponse>(responseText, new JsonSerializerOptions
    {
      PropertyNameCaseInsensitive = true
    });

    if (aiResponse == null || !aiResponse.Success) return;

    var storedMessages = await LocalStorageService.GetItemAsStringAsync("chats") ?? "[]";
    var jsonMessages = JsonSerializer.Deserialize<List<ChatThread>>(storedMessages) ?? [];

    if (ChatId == null) return;

    var existingChat = (jsonMessages).FirstOrDefault(c => c.ChatId == ChatId);

    List<ChatThread> addedMessages;

    if (existingChat == null)
    {
      addedMessages = new List<ChatThread>(jsonMessages) { new ChatThread { ChatId = ChatId, Title =
aiResponse.ResponseMessage } };
    }
    else
    {
      existingChat.Title = aiResponse.ResponseMessage;
      addedMessages = new List<ChatThread>(jsonMessages);
    }

    title = aiResponse.ResponseMessage;
    SidebarStateContainer.ChatThreads = addedMessages;

    StateHasChanged();

    await LocalStorageService.SetItemAsStringAsync("chats", JsonSerializer.Serialize(addedMessages));
  }

  protected override async Task OnParametersSetAsync()
  {
    if (IsNew)
    {
      await HandleTitleChange();
    }
    else
    {
      isLoadingInitialMessages = true;
      StateHasChanged();

      var chatResponse = await HttpClient.GetAsync($"http://localhost:5203/chat/{ChatId}/messages");
      var chatResponseText = await chatResponse.Content.ReadAsStringAsync();

      if (chatResponseText != null)
      {
        var aiChatResponse = JsonSerializer.Deserialize<List<ChatMessage>>(chatResponseText, new JsonSerializerOptions
        {
          PropertyNameCaseInsensitive = true
        });

        if (aiChatResponse != null)
        {
          ChatState.CurrentChatMessages = aiChatResponse;
        }
      }

      isLoadingInitialMessages = false;
      StateHasChanged();
    }
  }

  protected async Task DisposeAsync()
  {
    if (ChatState.WebSocket != null && ChatState.WebSocket.State == WebSocketState.Open)
    {
      DisposalTokenSource.Cancel();
      await ChatState.DisconectWS(DisposalTokenSource);
    }

    ChatState.CurrentChatMessages = new List<ChatMessage>();
    DisposalTokenSource = new CancellationTokenSource();

    if (!string.IsNullOrWhiteSpace(ChatId))
    {
      await ChatState.ConnectWS(ChatId, IsNew, DisposalTokenSource);
      _ = ReceiveLoop();
    }
  }
}